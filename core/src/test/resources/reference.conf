utilsDatastaxDefaults {
  seeds = ["localhost"]
  port = 9042
  protocolVersion = 3


  keyspace = null // required when calling Cassandra.fromConfig

  loggingThresholds { // used when using Cassandra; see utilsDatastaxCasandraLoggingThresholdsDefaults below for defaults

  }

  compression = "None" // Snappy, LZ4
  maxSchemaAgreementWaitSeconds = 10 s

  metrics = true
  jmxReporting = true // ignored, if metrics is disabled
  latenciesJmxMonitoring = false // ignored, if metrics or jmxReporting is disabled

  clusterName = "cassandra" // used as metric name

  ssl {
    enabled = false
    protocol = "TLS" // SSL
    implementation = "JDK" // Netty
    cipherSuites = ["TLS_RSA_WITH_AES_128_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA"] // for JDK
    provider = "OPENSSL" // JDK; for Netty
    keyStore { // for JDK implementation
      path = ""
      password = ""
    }
    trustStore { // for JDK and Netty implementation
      path = ""
      password = ""
    }
    keyManager { // for Netty implementation
      keyCertChainPath = ""
      keyPath = ""
    }
  }

  credentials {
    enabled = false
    username = ""
    password = ""
  }

  latencyTracker {
    type = "convenient" // writes ERROR after exception, TRACE for successfull queries
  }

  stateListener {
    type = "convenient" // writes INFO after node is added from cluster, removed etc.
  }

  // load-balancing policy is defined by exactly one core policy that can be wrapped in any number of chaining policies
  loadBalancingPolicy {
    corePolicy {
      type = "DCAwareRoundRobin" // RoundRobin
      localDataCenter = "" // used by DCAwareRoundRobin; if empty then auto-discovery of local DC is used
      usedHostsPerRemoteDc = 2 // used by DCAwareRoundRobin and only if localDataCenter is not empty
      allowRemoteDCsForLocalConsistencyLevel = true // used by DCAwareRoundRobin
    }
    // name-references into knownPolicies
    // the order of policies is important because it defines order in which policies are wrapped
    chainingPolicies = ["tokenAware", "latencyAware"]
    knownPolicies { // serves as source of definitions to use in chainingPolicies
      tokenAware {
        type = "TokenAware"
        shuffleReplicas = false
      }
      latencyAware {
        type = "LatencyAware"
        exclusionThreshold = 2.0
        minimumMeasurements = 50
        retryPeriod = 1 s
        scale = 1 s
        updateRate = 1 s
      }
      whitelist {
        type = "Whitelist"
        hosts = [] # list of host:port pairs, e.g. localhost:9042
      }
    }
  }

  poolingOptions {
    heartbeatInterval = 30 s
    idleTimeout = 120 s
    local {
      // if these values are not present then defaults of used ProtocolVersion will be used
      // coreConnectionsPerHost = 1
      // maxConnectionsPerHost = 1
      // maxRequestsPerConnection = 1024
      // newConnectionThreshold = 800
    }
    remote {
      // coreConnectionsPerHost = 1
      // maxConnectionsPerHost = 1
      // maxRequestsPerConnection = 256
      // newConnectionThreshold = 200
    }
  }

  queryOptions {
    consistencyLevel = ONE // ANY, ONE, TWO, THREE, QUORUM, ALL, LOCAL_QUORUM, EACH_QUORUM, SERIAL, LOCAL_SERIAL, LOCAL_ONE
    serialConsistencyLevel = SERIAL
    fetchSize = 5000
    defaultIdempotence = false
    metadata = true
    prepareOnAllHosts = true
    reprepareOnUp = true
    refreshNodeInterval = 1 s
    refreshNodeListInterval = 1 s
    refreshSchemaInterval = 1 s
    maxPendingRefreshNodeListRequests = 20
    maxPendingRefreshNodeRequests = 20
    maxPendingRefreshSchemaRequests = 20
  }

  reconnectionPolicy {
    type = "Constant" // Exponential
    constantDelay = 5 s // for Constant
    baseDelay = 1 s // for Exponential
    maxDelay = 10 m // for Exponential
  }

  retryPolicy {
    type = "Default" // DowngradingConsistency, Fallthrough, Constant
    logging = true // adds logging decorator
    maxRetries = 1 // for Constant
  }

  socketOptions {
    connectTimeout = 5 s
    readTimeout = 12 s
    // values bellow are by default read from underlying Netty transport - showed values are not defaults
    // keepAlive = true
    // reuseAddress = true
    // tcpNoDelay = true
    // receiveBufferSize = 1024
    // sendBufferSize = 1024
    // soLinger = 1024
  }

  speculativeExecutionPolicy {
    type = "No" // Constant, PercentilePerHost, PercentileClusterWide
    maxSpeculativeExecutions = 1
    constantDelay = 5 s // for Constant
    highestTrackableLatency = 15s // for Percentile*
    interval = 5 minutes // for Percentile*
    percentile = 99.0 // for Percentile*
  }

  timestampGenerator {
    type = "ServerSide" // AtomicMonotonic, ThreadLocalMonotonic
  }
}